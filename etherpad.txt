Software Carpentry at UCSB, January 31st - February 1st, 2014

Welcome to our Etherpad! 

Please enter your name on the top right of the page (where it says <enter your name>)

You can write things (notes, questions) in this text-box. You can also use the chat box on the bottom right to communicate with instructors, helpers, and other participants. Try it out! 

For a list of common configuration problems and solutions, see below -

https://github.com/swcarpentry/bc/wiki/Configuration-Problems-and-Solutions

Justin, ERG
Mark Wilber, EEMB
Shane Grigsby, Geog
Kevin Mwenda, Geog
Eric Fournier, Bren
Laura Urbisci, Bren
Frew, Bren
Mengya Tao, Bren
Kendra Garner, Bren
Ashley Larsen (EEMB)
Emily Ellis EEMB
Anastasiya Lazareva-Bren
Bo Romero, Geography
Patrick Callery, Bren
Ian McCullough, Bren
Cristiane Elfes, EEMB
Yang Lin, Geography
Cherie Briggs, EEMB
Sammy Toyon, Geography
Ole, Geog
Xiaoli Chen Bren School
Ty Brandt, Bren SChool
Andy MacDonald (EEMB)
Des Ramirez, EEMB
Zachary Tane, Geography
Tom Smith, EEMB
Andrew Ngai, EEMB
Mary Toothman, EEMB
Kitty Currier, Geog
Patrick Hall, Linguistics
Umihiko Hoshijima, EEMB
Laura Schultheis
Andrew Swafford, EEMB
Crystal English - GEOG (put it in the chat window before.)
Bo Yan, Geog

If you are interested in a interesting article about the command line and the difference between operating systems you can check out this great article by Neal Stephenson: http://en.wikipedia.org/wiki/In_the_Beginning..._Was_the_Command_Line

first question.... why use mysy shell instead of windows shell?

Windows shell is not *nix based so it actually has some different commands.  For example, to view your files you would type dir rather than ls.  Unix/Linux is a much more powerful command line tool. 

--

If your terminal (bash window) ever "freezes", just type Ctrl-C to end all processes.  It is like the ultimate "Exit" button. This should take you back to the $ prompt.

is python so bare we need a package like numpy? or are native functions just not that great...?

The standard library is quite bare - this is a conscious decision by the developers, especially important since Python is used for so many applications (i.e., web developers and physicists). Rather than pollute the main set of native functions, they're kept at a bare minimum with almost everything in external packages.

Here's the standard library

http://docs.python.org/2/library/index.html

and here's all the functions in it!

http://docs.python.org/2/library/functions.html

---

Justin---
Question--- for grep...
does 'grep -i' modify the reg expressions?

i.e., does :: 
$ grep -i -E "^.o"
match to both cap and lowercase "o" 's?

Don't know off the top of my head - did you try it and see?

---

what is the airspeed velocity of an unladen swallow?
African or European? 
Would it be too cliche to ask an African or European swallow?

(P.S. - For those who didn't know, yes, Python the language is named after Monty Python)

---

To get Shane's materials:
1. cd to your Desktop using the shell
2. Execute the command "git clone https://github.com/swcarpentry/2014-01-31-ucsb.git" (without the quotes)
3. cd into the folder 2014-01-31-ucsb/lessons/sg_python
4. Run the command ipython notebook again

ipython notebook --pylab inline


what does the argument 'self' require as input?




'self' is the objected oriented part of python.  If you have coded in C or Java it is very similar to the "this" variable.  In an object, you can refer to the object as "self".  When you make a method of an object the first argument to that method is always "self" so you can reference any of the variables and/or methods that are defined in that object.  It is a bit wierd if you are not familiar with object oriented programming, but it can be really useful.  

Here is an example (maybe I am going overboard here...lol)

class Example():
    
    def __init__(self):
        self. a = 2
    
    def show_a(self):
        return self.a

d = Example()
d.show_a()

# This will return a, kinda boring but hopefully useful 
        

---

HOW ARE YOU?
I am suffering from brain overload +1+1+1
Good thank you
Psyched. I think the pace was good overall. I would like to see more related to arc but it sounds like that is on the list for tomorrow. Thanks.
listless
tired.
very tired+1+1
tired but good+1
expired
less lost than expected but still a teeny bit overwhelmed.
Pace today was fast but I feel any slower would make it less exciting. Excited to see how R and Python intersect
good
slightly enlightened
enlightened 
Still intimidated!  I think the manual will come in handy later... 
BUUWAAHAHAHAHA
extremely caffeinated
a lot of info at once but still really helpful! thanks so much you guys
turned on by new plotting options. ++1
It would help me, and perhaps other coding novices, to receive more explicit explanations of what arguments and syntax mean and what are necessary in cerain situations  (i.e., why a colon, why brackets instead of parentheses)
fantabulous
pretty good job keeping everyone up to speed
It was a firehose but it a good one, exposure to all kinds of good stuff. Thanks!
Good job guys! Thanks a lot.
Thank you so much for all of your help!

---

If you are dropping into "less" when working with git type the following command.  In other words, you have to hit q after you type git lg type the following command in git.

git config --global core.pager cat


Color output in git

git config --global color.ui true

Resolving conflicts manually makes sense when merging data, but what if there are many, many conflicts? It's easy enough if there is only one conflict as in the example, but manually resolving many conflicts looks like a huge pain. Is the bottom line that we simply must minimize conflicts in the first place?

Good question.  This might not be the "right" answer but this is what I do. I
think there are two scenarios to consider. 1) Working with your own stuff and
2) Collaborating

1.  If you are working with your own stuff and you decide to branch and hack
away at your scripts to make them more readable you will get a lot of
conflicts.  What I do in this case is make a new commit of "master" without the
file that I am hacking and then merge my working branch back into master.  I
find this easier than trying to fix the all the conflicts.  Note that this will
still give you a conflict, but the conflict will be resolved by adding the new
file. If you only want to make small changes to your script than it is pretty
straight forward to fix conflicts.

2. If you are collaborating and working on the same piece of code you really
should not be working on the same code at the same time.  Typically one person
works on a bit of code (or part of a paper), the other reviews it then makes
the changes that she wants and you go back and forth like this.  



If it were me, I'd set up something like Diffmerge as my merge tool and launch that (basically, when you see the conflict and you're in the middle of the merge, you run "git mergetool" instead of opening the files manually, once you've set it up). That will give you a fast visual way to resolve even pretty difficult conflicts.

---

REFERENCES

Overall philosophy/what to focus on now vs. look up later - In general, I (JK) find that the worst part about computing are the "unknown unknowns", that is things that you don't know that you don't know. Things that you do know you don't know are easy by comparison - you just Google these when you have a minute. To deal with "unknown unknowns", your best bets are probably to (a) find collaborators who know more than you and try to shadow them as much as possible, and (b) occasionally skim through textbooks to make sure you've heard of everything that they cover.

Shell: Honestly, I (JK) would probably recommend sticking with what we covered yesterday, reviewing the longer shell tutorial linked from that lesson if you're interested, and then adding knowledge as you need it. If you did want a comprehensive reference/textbook for *NIX, there are many textbooks to choose from.

Git: The book Pro Git, which is online and free, is definitely the place to go next
http://git-scm.com/book
Chapters 1-5 are probably things that you'll want to look into now, while the remaining chapters are things that you can pick up as needed later on. Many of the more "advanced" operations (cherry-pick, rebase) only really come up when you're working with large teams on large projects.

Python: I've (JK) recommended this book before, although I haven't used it in great depth myself. It's really for beginners, but might provide a brush up for those of you who don't code much.
http://interactivepython.org/runestone/static/thinkcspy/toc.html
It's a free, interactive online book that actually has a Python interpreter built into the webpage - particularly good for brushing up on syntax.
For those of you who are farther along, the book Dive Into Python is another frequently recommended classic - your instructors (AR and JK) find it most useful for those switching from a language such as C (or perhaps Matlab) in which you're already fairly proficient. This book gets into fairly advanced usage of the language.
http://www.diveintopython.net

"Python for data analysis" is a good book that goes into data analysis details:
http://www.amazon.com/Python-Data-Analysis-Wrangling-IPython/dp/1449319793/ref=pd_sim_b_2
"A primer on Scientific programming with Python": Gives also a good overview for non-programmers in the first 2 chapters
http://hplgit.github.io/scipro-primer/

Python: 
http://www.greenteapress.com/thinkpython/
Free, comprehensive, easy to read book on computer science/programming principles using Python. With exercises. This was my intro to computer science textbook and was excellent for learning about programming and languages in general. 

Very practical:
http://stackoverflow.com/
http://www.google.com/
When I don't know how to do something or am getting an error I don't understand, I go to google, which usually sends me over to stackoverflow. Lots of people get stuck in similar places or get similar errors and then post their solutions on Q&A forums. 


General: Software Carpentry has a set of online lessons that are somewhat deprecated (they haven't been updated recently - for example, they still use SVN for vesion control), but will provide some basic info on things we won't cover here like make and databases.
http://software-carpentry.org/v4/index.html


http://scipy-lectures.github.io/ is a treasure trove of exercises and tips on using the scientific python eco-system.

http://swcarpentry.github.io/2014-01-27-Stanford/lessons/

Arcpy
https://pypi.python.org/pypi/GDAL/   (reprojection in python)
http://grasswiki.osgeo.org/wiki/GRASS_and_Python (GRASS GIS)

Multi / parallel processing:
http://ipython.org/ipython-doc/dev/parallel/parallel_process.html    (ipython engines)
http://docs.python.org/2/library/multiprocessing.html     (core multiprocessing lib)

For more matlab / R integration:
http://mathesaurus.sourceforge.net/matlab-python-xref.pdf

---

WHAT HAVEN'T WE COVERED?

working with matlab?
arc integration at more then 5-7 minutes+1
using the cloud.  parallel processing, high performance computing.
can you give a general explanation for what pandas is? clearly it's not the animal
Point us to a good tutorial to learn some of the deep functionality of python... the available commands are so vast, it's hard to know where to even start looking. 
Accessing web content and creating operational software.

GOOD?
FOR THOSE OF US WHO ARE NEWER TO THIS, THE OVERLOAD OF info is a good place to understand what you need to look out for in the future. +
sticky notes!++1+1+1+1
seriously though, very informative+
version control+1+1+1+1
awesome! need more classes like this, maybe for other languages+1
This was superawesome. +1 It WAS a lot, and my brain feels approximately like that green stuff in Ghostbusters (or flubber?) or jello, but I feel like there was more than enough content to keep me thinking for weeks to come. I'm going to rewrite my masters tonight with the one-button approach. main awesome things: git, notebooks, testing, one-button method. It would be nice to have a follow up class after students have attempted to use some of what we learned.
Love the method of version management with git, and that it can be used with any data file... LaTeX manuscripts, etc+1
very organized, lots of people to help when getting stuck+1+1+1
Great pace (except for the end of the second day--way fast). I really enjoyed the exposure to python and to the shell. The instructors were fantastic. All of the helpers were awesome as well. The sticky notes were effective at keeping the course going while not having hiccups stop progress. 
Arc application seems promising+1+1
The course offered a good place to start learning about all the various aspects of good programing.  Which is critical to producing a work that is easily reproducible.+1+1
efficiency in navigating shell
Instructor clarity and willingness for individual help+1+1
great content for shell and version control, and the notebook is so cool! +1+1
good coverage of huge amount of material in limited time... like that the tutorials and reference info will be available in perpetuity.  I will forget everything by next week, and will need to refresh in the future+1+1
way to stay on schedule, and not run over.++++1+1
The information was well presented generally and I enjoyed the overall philosophy of reproducability.+1+1
helpers were incredibly attentive and very helpful when issues arose this made staying up to speed with the instructors manageable+1+1
I liked how you had the "main instructors" and helpers that would continously be available throughout the workshop - great for beginners+++1+1
Appreciated having multiple individuals able to help students who were lost+1
So relieved to have a solution for version control. I would have never thought to ask about it if I was coming up with ideas for what to include in such a workshop, but obviously it's so necessary.
The coffee today was actually pretty solid. 
Going to need a smidge more time to formulate more thoughtful comments. Other than that, the workshop was extremely informative and useful (which is a super duper plus). Relativity is most awesome, indeed!
I am happily surprised that there was very few installation problems+1
The financial cost students paid for this workshop was unbeatable.+1+1+1+1

Nice to learn about various interfaces.
YAY glossary!+


BAD/COULD BE BETTER?
speed of presentations seemed inconsistent - some things went by really fast, while others moved more slowly - +1+1+1
more focus on arcgis and +1+1
can you explain why we need to combine python and r
I agree with the above, more focus on the big picture would have been helpful.
pacing is a bit tough to follow at times+1
I'd really like to see reference to a free geographic plotting system. GDAL was recommended
i think the one-button thing was really useful but maybe it should have had simpler, non-Pandas code as the examples, because I think the pandas syntax/brainmelt was obscuring the main point of the testing
confused by pandas+++1. why do we need it?+1
need a little more time to catch up when we get behind+1
hard time following unit test section
Could have used more basic coding background info (Maybe split class up next time instead of going for the median)
agree with the coding (and syntax) background above - maybe get some more practice and repetition with that before moving on 
Newer to coding--got confused as to when I should be in text editor, command line, iPython, etc. Would love a GUI like RStudio that allows manual control (no radio buttons) but makes the work area clear and organized. I caught on as we moved forward, but still confusing. Also, the gitbash command line is very inefficient for Windows users--erases all comands when moving back and forth from Nano to COmmand line and then I forgot what I did. I get frustrated when software is so clearly biased away from Windows.
Instructors could be more conscious of language/computer science jargon. Trying to keep up with the language can slow people down and this can compound over the workshop. Bren folks especially are sensitive to this. Communicating across disciplines is very challenging, for sure. However, some instructors were much better about this than others. Just something to think about.+1
I understand why the two day workshop timeframe, but also felt like I wasn't able to apply the same energy at the end of the afternoon as at the morning
Would have been useful to work with more than just python files when doing the version control
I needed more of the big picture for each item ~ how all these peices put togther and why we would want to do things in the given way versus other ways.+
I would have something even more in depth could this possibly be expanded to a larger workshop? In particularly I'd like to have seen some discusion of OOP.+1
maybe a real-world example to show off python capabilities+1
While I was install IDE, there were a lot of errors, and there were lots of different version of python, it was the thing which frustrate me most
Launched into some topics awfully quickly, and if you missed "how to get the right file uploaded into workspace" you can get hopelessly lost in a hurry. +1+1
more explanation of the different versions of python and how running them is different
Each topic could be introduced with a couple minutes about "why we should be interested in this and what it can help us accomplish"... some sections had this good intro, not all
Still a bit confused on the pandas, even from the small amount that was taught.
Would have liked to learn more about accessing web content
I'd like to learn a bit about modules and packages, with a bit more focus on functions
starting with creating a toy data set would have been useful at times because it would have made it clearer what we were actually manipulating/why+1
the color scheme of this etherpad is killing me
could you provide a short 'glossary' of frequently used commands.  never mind - thanks for pointing it out.  Reading lessons are not in your purview.
http://swcarpentry.github.io/2014-01-31-ucsb/lessons/ref/python.html
http://swcarpentry.github.io/2014-01-31-ucsb/lessons/ref/shell.html
